NAME- UDIT KHANDELWAL 							ASSIGNMENT-29 (TYPE CASTING AND CONVERSION)



1.Write a C++ program to convert Primitive type to Complex type.
Example -
int main()
{
Complex c1;
Int x=5;
c1=x;
return 0;
}

#include<iostream>
using namespace std;

class Complex
{
    int real;
    int imag;

public:
    Complex()
    {
        real=0;
        imag=0;
    }

    Complex(int a,int b)
    {
        real=a;
        imag=b;
    }

    Complex(int a)
    {
        real=a;
        imag=a;
    }

    void setData(int a,int b)
    {
        real=a;
        imag=b;
    }

    void display()
    {
        cout<<"real: "<<real<<" imag: "<<imag<<endl;
    }
};

int main()
{
    int x=5;

    Complex c1;
    c1=x;
    c1.display();

    return 0;
}


2. Write a C++ program to convert Complex type to Primitive type.
Example -
int main()
{
Complex c1;
c1.setData(3,4);
int x;
x=c1;
return 0;
}

#include<iostream>
using namespace std;

class Complex
{
    int real;
    int imag;

public:
    Complex()
    {
        real=0;
        imag=0;
    }

    Complex(int a,int b)
    {
        real=a;
        imag=b;
    }

    Complex(int a)
    {
        real=a;
        imag=a;
    }

    operator int()
    {
        return real;
    }

    void setData(int a,int b)
    {
        real=a;
        imag=b;
    }

    void display()
    {
        cout<<"real: "<<real<<" imag: "<<imag<<endl;
    }
};

int main()
{
    int x;

    Complex c1=5;
    c1.display();
    x=c1;
    cout<<x<<endl;

    return 0;
}


3. Create a Product class and convert Product type to Item type using constructor
int main()
{
Item i1;
Product p1;
p1.setData(3,4);
i1=p1;
return 0;
}

#include<iostream>
using namespace std;

class Item;

class Product
{
    int a;
    int b;

public:
    Product()
    {
        a=0;
        b=0;
    }

    Product(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    int getA()
    {
        return a;
    }

    int getB()
    {
        return b;
    }

    void setData(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    void display()
    {
        cout<<"a: "<<a<<" b: "<<b<<endl;
    }
};

class Item
{
    int a;
    int b;

public:
    Item()
    {
        a=0;
        b=0;
    }

    Item(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    Item(Product p)
    {
        a=p.getA();
        b=p.getB();
    }

    void setData(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    void display()
    {
        cout<<"a: "<<a<<" b: "<<b<<endl;
    }
};


int main()
{
    Product p1;
    p1.setData(3,4);
    p1.display();

    Item i1;
    i1.setData(5,6);
    i1.display();

    Item i2;
    i2=p1;
    i2.display();

    return 0;
}


4. Create Product class and convert Product type to Item type using casting operator
int main()
{
Item i1;
Product p1;

p1.setData(3,4);
i1=p1;
return 0;
}



#include<iostream>
using namespace std;

class Product;

class Item
{
    int a;
    int b;

public:
    Item()
    {
        a=0;
        b=0;
    }

    Item(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    Item(int a)
    {
        (*this).a=a;
        (*this).b=a;
    }

    int getA()
    {
        return a;
    }

    int getB()
    {
        return b;
    }

    void setData(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    void display()
    {
        cout<<"a: "<<a<<" b: "<<b<<endl;
    }
};
class Product
{
    int a;
    int b;

public:
    Product()
    {
        a=0;
        b=0;
    }

    Product(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    int getA()
    {
        return a;
    }

    int getB()
    {
        return b;
    }

    operator Item()
    {
        return a;
    }

    void setData(int a,int b)
    {
        (*this).a=a;
        (*this).b=b;
    }

    void display()
    {
        cout<<"a: "<<a<<" b: "<<b<<endl;
    }
};

int main()
{
    Product p1;
    p1.setData(3,4);
    p1.display();

    Item i1;
    i1.setData(5,6);
    i1.display();

    Item i2;
    i2=p1;
    i2.display();

    return 0;
}



5. Create two classes Invent1 and Invent2 and also add necessary constructors in it. Now add
functions to support Invent1 to float and Invent1 to Invent2 type.
Example -
int main()
{
Invent1 s1(4,5);
Invent2 d1;
float tv;
tv=s1;
d1=s1;
return 0;
}

#include<iostream>
using namespace std;

class Invent1
{
    int a,b;

public:
    Invent1()
    {
        a=0;
        b=0;
    }

    Invent1(int x,int y)
    {
        a=x;
        b=y;
    }

    operator float()
    {
        return a;
    }

    void setData(int x,int y)
    {
        a=x;
        b=y;
    }

    int getA()
    {
        return a;
    }

    int getB()
    {
        return b;
    }

    void display()
    {
        cout<<"a: "<<a<<" b: "<<b<<endl;
    }
};

class Invent2
{
    int a,b;

public:
    Invent2()
    {
        a=0;
        b=0;
    }

    Invent2(int x,int y)
    {
        a=x;
        b=y;
    }

    Invent2(Invent1 i)
    {
        a=i.getA();
        b=i.getB();
    }

    void setData(int x,int y)
    {
        a=x;
        b=y;
    }

    void display()
    {
        cout<<"a: "<<a<<" b: "<<b<<endl;
    }
};


int main()
{
Invent1 s1(4,5);
Invent2 d1;
float tv;
tv=s1;
d1=s1;
cout<<tv<<endl;
d1.display();
return 0;
}


6. Create a Time class and take Duration in seconds. Now you need to convert seconds(i.e in
int ) to Time class.

Example-
int main()

{
int duration;
cout<<”Enter time duration in minutes”;
cin>>duration;
Time t1 = duration;
t1.display();
return 0;
}

#include<iostream>
using namespace std;

class Time
{
    int h;
    float m;

public:
    Time()
    {
        h=0;
        m=0;
    }

    Time(int d)
    {
        h=d/3600;
        m=(d%3600)/60.0;
    }

    void display()
    {
        cout<<"Hour: "<<h<<" Min: "<<m<<endl;
    }
};


int main()
{
    int duration;
    cout<<"enter durations in seconds:";
    cin>>duration;

    Time t;
    t=duration;
    t.display();

    return 0;
}


7. Create two class Time and Minute and add required getter and setter including constructors.
Now you need to type cast Time object into Minute to fetch the minute from Time and display it.
Example -
int main()
{
Time t1(2,30);
t1.display();
Minute m1;
m1.display();
m1=t1; // Fetch minute from time
t1.display();
m1.display();
return 0;
}

#include<iostream>
using namespace std;

class Time
{
    int h;
    float m;

public:
    Time()
    {
        h=0;
        m=0;
    }

    Time(int x,int y)
    {
        h=x;
        m=y;
    }

    int getMin()
    {
        return m;
    }

    void display()
    {
        cout<<"Hour: "<<h<<" Min: "<<m<<endl;
    }
};

class Minute
{
    int m;

public:
    Minute()
    {
        m=0;
    }

    Minute(int x)
    {
        m=x;
    }

    Minute(Time t)
    {
        m=t.getMin();
    }

    void display()
    {
        cout<<"Min: "<<m<<endl;
    }
};

int main()
{
    Time t1(2,30);
    t1.display();
    Minute m1;
    m1.display();
    m1=t1; // Fetch minute from time
    t1.display();
    m1.display();

    return 0;
}


8. Create a Rupee class and convert it into int. And Display it.

Example-
int main()
{
Rupee r = 10;
int x = r;
cout<<x;
return 0;
}

#include<iostream>
using namespace std;

class Rupee
{
    int r;

public:
    Rupee()
    {
        r=0;
    }

    Rupee(int x)
    {
        r=x;
    }

    operator int()
    {
        return r;
    }

    void display()
    {
        cout<<"Rupee: "<<r<<endl;
    }
};

int main()
{
    Rupee r = 10;
    int x = r;
    cout<<x;

    return 0;
}


9. Create a Dollar class and add necessary functions to support int to Dollar type conversion.

Example-
int main()

{
int x = 50;
Dollar d;
d = x;
d.display();
return 0;
}


#include<iostream>
using namespace std;

class Dollar
{
    int d;

public:
    Dollar()
    {
        d=0;
    }

    Dollar(int x)
    {
        d=x;
    }

    void display()
    {
        cout<<"Dollar: "<<d<<endl;
    }
};

int main()
{
    int x = 50;
    Dollar d;
    d = x;
    d.display();

    return 0;
}


10. Create two classes Rupee and Dollar and add necessary functions to support Rupee to
Dollar and Dollar to Rupee conversion.

Example-
int main()

{
Rupee r = 23;
Dollar d = r; // Rupee to Dollar conversion
d.display();
r.display();
r = d; // Dollar to Rupee Conversion
d.display();
r.display();
return 0;
}

#include<iostream>
using namespace std;

class Rupee
{
    int r;

public:

    Rupee()
    {
        r=0;
    }

    Rupee(int x)
    {
        r=x;
    }

    int getR()
    {
        return r;
    }

    void display()
    {
        cout<<"Rupee: "<<r<<endl;
    }
};

class Dollar
{
    int d;

public:
    Dollar()
    {
        d=0;
    }

    Dollar(int x)
    {
        d=x;
    }

    Dollar(Rupee r)
    {
        d=r.getR()/100.0;
    }

    operator Rupee()
    {
        return d*100.0;
    }

    void display()
    {
        cout<<"Dollar: "<<d<<endl;
    }
};

int main()
{
    Rupee r = 2300;
    Dollar d = r; // Rupee to Dollar conversion
    d.display();
    r.display();
    r = d; // Dollar to Rupee Conversion
    d.display();
    r.display();

    return 0;
}




